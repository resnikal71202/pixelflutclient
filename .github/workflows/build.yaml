name: Build Program

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64, arm64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Update submodules
      run: git submodule update --init --recursive

    - name: Set up build environment on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Set up build environment on macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install gcc
        brew tap messense/macos-cross-toolchains
        brew install aarch64-unknown-linux-gnu

    - name: Set up build environment on Windows
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-i686-gcc
        msystem: MINGW64

    - name: Build for x86 on Linux and macOS
      if: matrix.arch == 'x64' && matrix.os != 'windows-latest'
      run: gcc -Wall -O0 client.c -lm -lpthread -o client

    - name: Build for ARM on Linux
      if: matrix.arch == 'arm64' && matrix.os == 'ubuntu-latest'
      run: aarch64-linux-gnu-gcc -Wall -O0 client.c -lm -lpthread -o client-arm

    - name: Build for ARM on macOS
      if: matrix.arch == 'arm64' && matrix.os == 'macos-latest'
      run: aarch64-unknown-linux-gnu-gcc -Wall -O0 client.c -lm -lpthread -o client-arm

    - name: Build for x86 on Windows
      if: matrix.arch == 'x64' && matrix.os == 'windows-latest'
      run: gcc -Wall -O0 client.c -lm -lpthread -lws2_32 -o client.exe

    - name: Skip ARM build on Windows
      if: matrix.arch == 'arm64' && matrix.os == 'windows-latest'
      run: echo "ARM build not supported on Windows"

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}
        path: |
          client.exe
          client
          client-arm

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ubuntu-latest-x64
        path: ./artifacts/ubuntu-latest-x64

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ubuntu-latest-arm64
        path: ./artifacts/ubuntu-latest-arm64

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-latest-x64
        path: ./artifacts/macos-latest-x64

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-latest-arm64
        path: ./artifacts/macos-latest-arm64

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-latest-x64
        path: ./artifacts/windows-latest-x64

    - name: Get the current timestamp
      id: vars
      run: echo "RELEASE_TAG=release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Delete existing release if it exists
      uses: oktokit/request-action@v2.x
      if: ${{ steps.create_release.outputs.failed }}
      with:
        route: DELETE /repos/:owner/:repo/releases/tags/:tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ env.RELEASE_TAG }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Release ${{ env.RELEASE_TAG }}
        draft: false
        prerelease: false

    - name: Upload Linux x64 Build
      uses: actions/upload-release-asset@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/ubuntu-latest-x64/client
        asset_name: client-linux-x64
        asset_content_type: application/octet-stream

    - name: Upload Linux ARM64 Build
      uses: actions/upload-release-asset@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/ubuntu-latest-arm64/client-arm
        asset_name: client-linux-arm64
        asset_content_type: application/octet-stream

    - name: Upload macOS x64 Build
      uses: actions/upload-release-asset@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/macos-latest-x64/client
        asset_name: client-macos-x64
        asset_content_type: application/octet-stream

    - name: Upload macOS ARM64 Build
      uses: actions/upload-release-asset@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/macos-latest-arm64/client-arm
        asset_name: client-macos-arm64
        asset_content_type: application/octet-stream

    - name: Upload Windows x64 Build
      uses: actions/upload-release-asset@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/windows-latest-x64/client.exe
        asset_name: client-windows-x64.exe
        asset_content_type: application/octet-stream
