name: Build Program

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64, arm64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Update submodules
      run: git submodule update --init --recursive

    - name: Set up build environment on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib g++-multilib

    - name: Set up build environment on macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install gcc

    - name: Set up build environment on Windows
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-i686-gcc
          mingw-w64-aarch64-gcc
          mingw-w64-armv7-gcc
        msystem: MINGW64

    - name: Build for x86 on Linux and macOS
      if: matrix.arch == 'x64' && matrix.os != 'windows-latest'
      run: gcc -Wall -O0 client.c -lm

    - name: Build for ARM on Linux and macOS
      if: matrix.arch == 'arm64' && matrix.os != 'windows-latest'
      run: gcc -Wall -O0 -march=armv8-a client.c -lm

    - name: Build for x86 on Windows
      if: matrix.arch == 'x64' && matrix.os == 'windows-latest'
      run: |
        gcc -Wall -O0 client.c -lm -o client.exe

    - name: Build for ARM on Windows
      if: matrix.arch == 'arm64' && matrix.os == 'windows-latest'
      run: |
        gcc -Wall -O0 -march=armv8-a client.c -lm -o client.exe

    - name: Archive build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}
        path: |
          client.exe
          client
